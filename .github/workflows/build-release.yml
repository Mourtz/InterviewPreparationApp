name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to build (e.g., v1.0.2)'
        required: true
        default: 'v1.0.2'

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Build for Windows
        if: matrix.os == 'windows-latest'
        run: npm run build:win

      - name: Build for macOS
        if: matrix.os == 'macos-latest'
        run: npm run build:mac

      - name: Build for Linux
        if: matrix.os == 'ubuntu-latest'
        run: npm run build:linux:safe

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-builds
          path: |
            dist/*.exe
            dist/*.zip

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-builds
          path: |
            dist/*.dmg
            dist/*.zip

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-builds
          path: |
            dist/*.tar.xz
            dist/*.AppImage

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            ## Interview Preparation App ${{ github.ref }}
            
            ### Desktop Downloads
            - **Windows**: `.exe` installer and portable `.zip`
            - **macOS**: `.dmg` installer and `.zip` archive  
            - **Linux**: `.tar.xz` archive
            
            ### Features
            - AI-powered mock technical interviews
            - Support for OpenAI, LM Studio, and Ollama
            - Code editor with syntax highlighting
            - PDF/text file upload for CVs and job descriptions
            - Real-time evaluation and feedback
            
            ### Web Version
            Try the web version at: https://mourtz.github.io/InterviewPreparationApp/app/
            
            ### Setup
            1. Download the appropriate version for your OS
            2. Install and run the application
            3. Configure your AI provider (OpenAI API key, or local LM Studio/Ollama)
            4. Upload job description and start practicing!
          draft: false
          prerelease: false

      - name: Upload Windows Installer
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-builds/Interview Preparation App-${{ github.ref_name }}-win-x64.exe
          asset_name: Interview-Preparation-App-Setup-${{ github.ref_name }}.exe
          asset_content_type: application/octet-stream

      - name: Upload Windows Portable
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-builds/Interview Preparation App-${{ github.ref_name }}-win-x64.zip
          asset_name: Interview-Preparation-App-Portable-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Upload macOS DMG
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-builds/Interview Preparation App-${{ github.ref_name }}-mac-x64.dmg
          asset_name: Interview-Preparation-App-${{ github.ref_name }}.dmg
          asset_content_type: application/octet-stream

      - name: Upload macOS ZIP
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./macos-builds/Interview Preparation App-${{ github.ref_name }}-mac-x64.zip
          asset_name: Interview-Preparation-App-macOS-${{ github.ref_name }}.zip
          asset_content_type: application/zip

      - name: Upload Linux Archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-builds/Interview Preparation App-${{ github.ref_name }}-linux-x64.tar.xz
          asset_name: Interview-Preparation-App-Linux-${{ github.ref_name }}.tar.xz
          asset_content_type: application/x-xz
