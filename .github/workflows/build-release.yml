name: Build and Release Desktop App

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: win
          - os: macos-latest
            platform: mac
          - os: ubuntu-latest
            platform: linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for Windows
        if: matrix.platform == 'win'
        run: npm run build:win
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for macOS
        if: matrix.platform == 'mac'
        run: npm run build:mac
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build for Linux
        if: matrix.platform == 'linux'
        run: npm run build:linux
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Windows artifacts
        if: matrix.platform == 'win'
        uses: actions/upload-artifact@v4
        with:
          name: windows-binaries
          path: |
            dist/*.exe
            dist/*.zip
          retention-days: 30

      - name: Upload macOS artifacts
        if: matrix.platform == 'mac'
        uses: actions/upload-artifact@v4
        with:
          name: macos-binaries
          path: |
            dist/*.dmg
            dist/*.zip
          retention-days: 30

      - name: Upload Linux artifacts
        if: matrix.platform == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries
          path: |
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display artifact structure
        run: find artifacts -type f -name "*" | head -20

      - name: Get version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Prepare release files
        run: |
          mkdir -p release-files
          
          # Find and copy Windows files
          if [ -d "artifacts/windows-binaries" ]; then
            find artifacts/windows-binaries -name "*.exe" -exec cp {} release-files/InterviewPreparationApp-Setup.exe \; || true
            find artifacts/windows-binaries -name "*portable*.zip" -exec cp {} release-files/InterviewPreparationApp-Windows-Portable.zip \; || true
          fi
          
          # Find and copy macOS files
          if [ -d "artifacts/macos-binaries" ]; then
            find artifacts/macos-binaries -name "*.dmg" -exec cp {} release-files/InterviewPreparationApp.dmg \; || true
            find artifacts/macos-binaries -name "*.zip" -exec cp {} release-files/InterviewPreparationApp-macOS.zip \; || true
          fi
          
          # Find and copy Linux files
          if [ -d "artifacts/linux-binaries" ]; then
            find artifacts/linux-binaries -name "*.AppImage" -exec cp {} release-files/InterviewPreparationApp.AppImage \; || true
            find artifacts/linux-binaries -name "*.deb" -exec cp {} release-files/InterviewPreparationApp.deb \; || true
            find artifacts/linux-binaries -name "*.rpm" -exec cp {} release-files/InterviewPreparationApp.rpm \; || true
          fi
          
          ls -la release-files/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.version }}
          name: Interview Preparation App ${{ steps.version.outputs.version }}
          body: |
            ## ðŸŽ¯ Interview Preparation App ${{ steps.version.outputs.version }}
            
            AI-powered mock technical interview desktop application.
            
            ### ðŸ“¥ Downloads
            - **Windows**: Download the `.exe` installer or portable `.zip`
            - **macOS**: Download the `.dmg` installer or `.zip` archive
            - **Linux**: Download the `.AppImage`, `.deb`, or `.rpm` package
            
            ### âœ¨ Features
            - AI-powered interview questions
            - Code editor with syntax highlighting
            - Timer and session management
            - PDF document parsing (CV and job descriptions)
            - Export interview results
            
            ### ðŸ”§ Requirements
            - Optional: LM Studio for local AI processing
            - Fallback: Static questions mode
            
            For setup instructions, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
          draft: false
          prerelease: false
          files: release-files/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
